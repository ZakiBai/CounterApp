name: iOS CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: Set default scheme automatically
        id: scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['schemes'][0]")
          echo "scheme=$default" >> $GITHUB_OUTPUT
          echo "Using default scheme: $default"

      - name: Build and Test
        run: |
          # Определяем workspace или project автоматически
          if ls *.xcworkspace 1> /dev/null 2>&1; then
            filetype_parameter="workspace"
            file_to_build=$(ls *.xcworkspace | head -n1)
          else
            filetype_parameter="project"
            file_to_build=$(ls *.xcodeproj | head -n1)
          fi

          # Берём первый доступный iPhone Simulator
          device=$(xcrun simctl list devices available | grep -o "iPhone .* (.*) (Booted\|Shutdown)" | head -n1 | awk -F '(' '{print $1}' | sed 's/ *$//')

          # Берём последнюю версию iOS для этого устройства
          os_version=$(xcrun simctl list runtimes | grep -o "iOS .*" | head -n1 | awk '{print $2}')

          echo "Building scheme: ${{ steps.scheme.outputs.scheme }}"
          echo "Device: $device, OS: $os_version"

          # Build
          xcodebuild build-for-testing \
            -scheme "${{ steps.scheme.outputs.scheme }}" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=iOS Simulator,name=$device,OS=$os_version"

          # Test
          xcodebuild test \
            -scheme "${{ steps.scheme.outputs.scheme }}" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=iOS Simulator,name=$device,OS=$os_version"
